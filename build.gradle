plugins {
    id "net.neoforged.gradle.userdev" version "7.0.80"
}

apply plugin: "java-library"
apply plugin: "maven-publish"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = rootProject.archives_base_name
version = "${rootProject.mc_version}-${rootProject.mod_version}"
group = rootProject.maven_group

repositories {
	maven {
		name "JEI"
		url "https://dvs1.progwml6.com/files/maven"
	}
	maven {
		name "ModMaven"
		url "https://modmaven.dev"
	}
	maven {
		name "CurseForge"
		url "https://www.cursemaven.com"
	}
	maven {
		name "Local"
		url uri("${projectDir}/libs")
	}
}

runs {
	configureEach {
		systemProperty "forge.logging.markers", "REGISTRIES"
		systemProperty "forge.logging.console.level", "debug"

		modSource project.sourceSets.main
	}

	client {
		systemProperty "forge.enabledGameTestNamespaces", project.mod_id
	}

	server {
		systemProperty "forge.enabledGameTestNamespaces", project.mod_id
		programArgument '--nogui'
	}

	gameTestServer {
		systemProperty "forge.enabledGameTestNamespaces", project.mod_id
	}

	data {
		programArguments.addAll "--mod", project.mod_id, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources/").getAbsolutePath()
	}
}

sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
    // Mod
    implementation "net.neoforged:neoforge:${neoforge_api_version}"

    // Required
    implementation "mekanism:Mekanism:${mc_version}-${mekanism_version}"
    runtimeOnly "mekanism:Mekanism:${mc_version}-${mekanism_version}:additions"
    runtimeOnly "mekanism:Mekanism:${mc_version}-${mekanism_version}:generators"
    runtimeOnly "mekanism:Mekanism:${mc_version}-${mekanism_version}:tools"

    // Runtiem Only
    implementation "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
}

tasks.withType(ProcessResources).configureEach {
    var resourceTargets = ["META-INF/mods.toml", "*.json"]
    var intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
    var replaceProperties = [mc_version: mc_version,
        mod_id: mod_id, mod_version: mod_version, mod_name: mod_name, mod_description: mod_description, mod_license: mod_license, mod_homepage: mod_homepage, mod_source: mod_source, mod_issues: mod_issues,
        neoforge_api_version: neoforge_api_version, neoforge_api_version_range: neoforge_api_version_range, neoforge_loader_version: neoforge_loader_version,
        mekanism_version_range: mekanism_version_range
    ]
	inputs.properties replaceProperties

	filesMatching(resourceTargets) {
		expand replaceProperties + [project: project]
	}

	intoTargets.each { target ->
		if (file(target).exists()) {
			copy {
				from(sourceSets.main.resources) {
					include resourceTargets
					expand replaceProperties
				}
				into target
			}
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}
